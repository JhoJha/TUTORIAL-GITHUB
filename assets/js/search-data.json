{"0": {
    "doc": "Codespaces y Dev Editor",
    "title": "Codespaces y Dev Editor",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/codespaces_dev_editor.html",
    
    "relUrl": "/docs/codespaces_dev_editor.html"
  },"1": {
    "doc": "Conclusi√≥n",
    "title": "Conclusiones",
    "content": "El uso de GitHub no solo transforma la manera en que se gestiona el c√≥digo, sino tambi√©n la forma en que los equipos colaboran, se comunican y aprenden juntos. A lo largo de este tutorial, hemos explorado herramientas clave como Issues, Pull Requests, Projects, Gists, GitHub Pages y m√°s. Cada una de estas funciones cumple un rol fundamental dentro del flujo de trabajo moderno en el desarrollo de software. GitHub es mucho m√°s que un simple repositorio de archivos: Es una plataforma de colaboraci√≥n global que fomenta la transparencia, la organizaci√≥n, la revisi√≥n constante del c√≥digo y la mejora continua. Entre los aprendizajes m√°s importantes que este tutorial nos deja, destacamos: . | La importancia del control de versiones para el trabajo ordenado y reversible. | El valor de la colaboraci√≥n estructurada mediante herramientas como Issues y Pull Requests. | C√≥mo utilizar GitHub como un espacio para documentar, automatizar y compartir proyectos. | El poder de la comunidad y la filosof√≠a open source, que nos invita a contribuir y aprender constantemente. | . Este conocimiento no solo es √∫til para trabajar en equipo, sino tambi√©n para tu crecimiento profesional individual, ya que dominar GitHub es una habilidad esencial en cualquier √°rea relacionada con la tecnolog√≠a y el desarrollo. ‚ÄúNo se trata solo de escribir c√≥digo, sino de construir soluciones juntos.‚Äù . Gracias por llegar hasta aqu√≠. ",
    "url": "/TUTORIAL-GITHUB/docs/conclusion.html#conclusiones",
    
    "relUrl": "/docs/conclusion.html#conclusiones"
  },"2": {
    "doc": "Conclusi√≥n",
    "title": "Conclusi√≥n",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/conclusion.html",
    
    "relUrl": "/docs/conclusion.html"
  },"3": {
    "doc": "Cr√©ditos",
    "title": "Cr√©ditos",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/creditos.html",
    
    "relUrl": "/docs/creditos.html"
  },"4": {
    "doc": "GitHub Gists",
    "title": "GitHub Gists",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/gist.html",
    
    "relUrl": "/docs/gist.html"
  },"5": {
    "doc": "GitHub Actions",
    "title": "GitHub Actions",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/github_actions.html",
    
    "relUrl": "/docs/github_actions.html"
  },"6": {
    "doc": "GitHub Pages",
    "title": "GitHub Pages",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/github_pages.html",
    
    "relUrl": "/docs/github_pages.html"
  },"7": {
    "doc": "GitHub Pages",
    "title": "¬øQu√© es GitHub Pages?",
    "content": "GitHub Pages es una funcionalidad gratuita que permite convertir un repositorio en un sitio web est√°tico directamente desde tu c√≥digo Markdown o HTML. Es ideal para documentaci√≥n, portafolios, blogs y tutoriales. ",
    "url": "/TUTORIAL-GITHUB/docs/github_pages.html#qu%C3%A9-es-github-pages",
    
    "relUrl": "/docs/github_pages.html#qu√©-es-github-pages"
  },"8": {
    "doc": "GitHub Pages",
    "title": "‚öôÔ∏è ¬øC√≥mo se configura GitHub Pages?",
    "content": ". | Ve al repositorio en GitHub. | Entra a Settings &gt; Pages. | Selecciona la rama a usar (por ejemplo main) y la carpeta base (/root o /docs). | Guarda y espera unos segundos. | Tu web estar√° disponible en una URL como: | . [https://tuusuario.github.io/tu-repositorio](https://tuusuario.github.io/tu-repositorio) . ",
    "url": "/TUTORIAL-GITHUB/docs/github_pages.html#%EF%B8%8F-c%C3%B3mo-se-configura-github-pages",
    
    "relUrl": "/docs/github_pages.html#Ô∏è-c√≥mo-se-configura-github-pages"
  },"9": {
    "doc": "GitHub Pages",
    "title": "Implementaci√≥n en este proyecto",
    "content": "En este tutorial colaborativo, usamos GitHub Pages para presentar todo el contenido de manera visual y navegable. Aqu√≠ te explicamos c√≥mo lo hicimos paso a paso: . 1. Creamos un archivo index.md . Este archivo es el punto de entrada del sitio. Contiene una tabla de contenido con enlaces a cada tema del tutorial. ### Ejemplo de enlace: üîó [Leer m√°s...](docs/issues.md) . Este index.md se encuentra en la ra√≠z del repositorio y act√∫a como p√°gina de inicio. ‚öôÔ∏è 2. Configuramos el archivo _config.yml . Este archivo define los metadatos del sitio y es clave para que GitHub Pages funcione correctamente con Jekyll (el motor que renderiza el sitio). title: Tutorial de GitHub description: Gu√≠a colaborativa para dominar GitHub author: Jhon Villegas url: \"https://jhojha.github.io\" baseurl: \"/TUTORIAL-GITHUB\" theme: jekyll-theme-minimal sass: sass_dir: assets/css style: compressed include: - assets/css nav: - title: \"Inicio\" url: / - title: \"Repositorio\" url: https://github.com/JhoJha/TUTORIAL-GITHUB - title: \"Ver TUTORIAL.md\" url: /TUTORIAL.md . üìå El campo baseurl fue clave para que los enlaces funcionaran correctamente al estar en una subcarpeta. üé® 3. Estilizamos el sitio con SCSS personalizado . Creamos un archivo .scss dentro de assets/css/ con un dise√±o adaptado a la lectura: . | Fondo crema claro. | Tipograf√≠a legible. | Layout responsive. | Colores amigables para la vista. | . @import \"just-the-docs\"; body { background-color: #fdf6e3; color: #2c3e50; font-family: \"Segoe UI\", \"Helvetica Neue\", sans-serif; } . El estilo fue aplicado autom√°ticamente al agregar el SCSS en el include: del _config.yml. üñºÔ∏è 4. Vista real del sitio publicado . üì∑ Vista general del sitio web . üì∑ Men√∫ de navegaci√≥n personalizado . ",
    "url": "/TUTORIAL-GITHUB/docs/github_pages.html#implementaci%C3%B3n-en-este-proyecto",
    
    "relUrl": "/docs/github_pages.html#implementaci√≥n-en-este-proyecto"
  },"10": {
    "doc": "GitHub Pages",
    "title": "Ventajas de usar GitHub Pages en este proyecto",
    "content": ". | Permite mostrar el contenido de forma clara y ordenada. | Transforma el repositorio en una experiencia visual accesible. | Facilita la exposici√≥n ante la profesora o cualquier evaluador. | Sirve como portafolio digital para mostrar el trabajo realizado. | . ",
    "url": "/TUTORIAL-GITHUB/docs/github_pages.html#ventajas-de-usar-github-pages-en-este-proyecto",
    
    "relUrl": "/docs/github_pages.html#ventajas-de-usar-github-pages-en-este-proyecto"
  },"11": {
    "doc": "GitHub Pages",
    "title": "Conclusi√≥n",
    "content": "Gracias a GitHub Pages, este tutorial dej√≥ de ser solo archivos .md para convertirse en una gu√≠a web profesional y navegable. Aprender a configurar y publicar con GitHub Pages es una habilidad fundamental para todo desarrollador moderno. ",
    "url": "/TUTORIAL-GITHUB/docs/github_pages.html#conclusi%C3%B3n",
    
    "relUrl": "/docs/github_pages.html#conclusi√≥n"
  },"12": {
    "doc": "GitHub Projects",
    "title": "GitHub Projects",
    "content": "GitHub Projects es una herramienta poderosa para gestionar tareas dentro de un repositorio usando tableros tipo Kanban. Permite organizar visualmente el progreso del equipo, planificar tareas, dar seguimiento a lo pendiente y mantener el enfoque en los objetivos del proyecto. ",
    "url": "/TUTORIAL-GITHUB/docs/github_projects.html",
    
    "relUrl": "/docs/github_projects.html"
  },"13": {
    "doc": "GitHub Projects",
    "title": "¬øPara qu√© sirve GitHub Projects?",
    "content": ". | Visualizar el avance de un proyecto en tiempo real. | Asignar tareas espec√≠ficas a cada integrante del equipo. | Priorizar tareas y dividir el trabajo por etapas. | Facilitar la colaboraci√≥n y la transparencia. | Reemplazar herramientas externas de gesti√≥n como Trello o Notion, todo dentro de GitHub. | . ",
    "url": "/TUTORIAL-GITHUB/docs/github_projects.html#para-qu%C3%A9-sirve-github-projects",
    
    "relUrl": "/docs/github_projects.html#para-qu√©-sirve-github-projects"
  },"14": {
    "doc": "GitHub Projects",
    "title": "¬øC√≥mo lo usamos en este proyecto?",
    "content": "En este tutorial colaborativo, usamos GitHub Projects para organizar la creaci√≥n de cada secci√≥n del contenido, asegurando que todos los temas fueran cubiertos de manera progresiva y coordinada. Creamos un tablero Kanban con tres columnas: . | Por hacer: Secciones pendientes por escribir. | En progreso: Secciones que alguien ya est√° desarrollando. | Terminado: Secciones completadas y revisadas. | . Vista del proyecto (estado general) . Vista del tablero Kanban con tareas distribuidas . ",
    "url": "/TUTORIAL-GITHUB/docs/github_projects.html#c%C3%B3mo-lo-usamos-en-este-proyecto",
    
    "relUrl": "/docs/github_projects.html#c√≥mo-lo-usamos-en-este-proyecto"
  },"15": {
    "doc": "GitHub Projects",
    "title": "Beneficios reales para este repositorio",
    "content": ". | Nos permiti√≥ distribuir las responsabilidades entre los integrantes. | Cada quien sab√≠a qu√© deb√≠a hacer, evitando duplicidad o desorden. | Hicimos seguimiento claro del progreso, viendo qu√© faltaba y qu√© estaba listo. | Sirvi√≥ como evidencia visual del trabajo realizado durante la exposici√≥n del proyecto. | . ",
    "url": "/TUTORIAL-GITHUB/docs/github_projects.html#beneficios-reales-para-este-repositorio",
    
    "relUrl": "/docs/github_projects.html#beneficios-reales-para-este-repositorio"
  },"16": {
    "doc": "GitHub Projects",
    "title": "Conclusi√≥n",
    "content": "GitHub Projects ha sido clave para gestionar y dar orden a este tutorial. No solo permiti√≥ trabajar de forma organizada, sino tambi√©n demostrar ante la profesora el avance real y distribuido del equipo. Usar herramientas como esta eleva el nivel de cualquier repositorio colaborativo. ",
    "url": "/TUTORIAL-GITHUB/docs/github_projects.html#conclusi%C3%B3n",
    
    "relUrl": "/docs/github_projects.html#conclusi√≥n"
  },"17": {
    "doc": "Inicio",
    "title": "Bienvenido al Tutorial de GitHub",
    "content": "Gu√≠a colaborativa para dominar GitHub, elaborada por estudiantes de la UNALM. | üè† Inicio | üìÅ Repositorio en GitHub | üìò Ver TUTORIAL.md | . ",
    "url": "/TUTORIAL-GITHUB/#bienvenido-al-tutorial-de-github",
    
    "relUrl": "/#bienvenido-al-tutorial-de-github"
  },"18": {
    "doc": "Inicio",
    "title": "üìö Contenido",
    "content": ". | Bienvenido al Tutorial de GitHub . | üìö Contenido | 1. Introducci√≥n | 2. Issues | 3. Pull Requests | 4. GitHub Projects | 5. Automatizaci√≥n con GitHub Actions | 6. GitHub Gists | 7. GitHub Pages | 8. Codespaces y Dev Editor | 9. Conclusi√≥n | 10. Cr√©ditos | . | . ",
    "url": "/TUTORIAL-GITHUB/#-contenido",
    
    "relUrl": "/#-contenido"
  },"19": {
    "doc": "Inicio",
    "title": "1. Introducci√≥n",
    "content": "GitHub es la plataforma por excelencia para colaborar en proyectos de software. M√°s que un lugar para guardar c√≥digo, es una red global que facilita el trabajo en equipo, el control de versiones y la innovaci√≥n abierta. En esta secci√≥n descubrir√°s c√≥mo GitHub ha transformado la forma de desarrollar software en todo el mundo. üîó Leer m√°s‚Ä¶ . ",
    "url": "/TUTORIAL-GITHUB/#1-introducci%C3%B3n",
    
    "relUrl": "/#1-introducci√≥n"
  },"20": {
    "doc": "Inicio",
    "title": "2. Issues",
    "content": "Los Issues en GitHub permiten organizar el trabajo colaborativo: puedes reportar errores, proponer mejoras, asignar tareas o hacer preguntas. Son clave para planificar y dar seguimiento al desarrollo de un proyecto. En esta secci√≥n aprender√°s a crearlos, asignarlos, cerrarlos y usar buenas pr√°cticas con ejemplos reales. üîó Leer m√°s‚Ä¶ . ",
    "url": "/TUTORIAL-GITHUB/#2-issues",
    
    "relUrl": "/#2-issues"
  },"21": {
    "doc": "Inicio",
    "title": "3. Pull Requests",
    "content": "Los Pull Requests (PR) son fundamentales en el trabajo colaborativo con GitHub. Permiten proponer cambios desde una rama hacia otra (como main) para que otros puedan revisarlos antes de ser aceptados. En esta secci√≥n aprender√°s c√≥mo crear un PR desde la terminal y la interfaz web, c√≥mo revisarlos correctamente, aprobarlos y fusionarlos de forma segura. Tambi√©n se incluyen buenas pr√°cticas para revisiones de c√≥digo, como detectar errores, sugerir mejoras y fomentar el aprendizaje dentro del equipo. üîó Leer m√°s‚Ä¶ . ",
    "url": "/TUTORIAL-GITHUB/#3-pull-requests",
    
    "relUrl": "/#3-pull-requests"
  },"22": {
    "doc": "Inicio",
    "title": "4. GitHub Projects",
    "content": "GitHub Projects permite gestionar tareas usando tableros tipo Kanban directamente en tu repositorio. En este tutorial, usamos esta herramienta para organizar el trabajo en equipo, distribuir responsabilidades y hacer seguimiento al avance de cada secci√≥n. Ver√°s c√≥mo configuramos el tablero, c√≥mo se distribuyeron las tareas y qu√© beneficios trajo para mantenernos organizados y enfocados. üîó Leer m√°s‚Ä¶ . ",
    "url": "/TUTORIAL-GITHUB/#4-github-projects",
    
    "relUrl": "/#4-github-projects"
  },"23": {
    "doc": "Inicio",
    "title": "5. Automatizaci√≥n con GitHub Actions",
    "content": "Explica qu√© es y un ejemplo sencillo (por ejemplo, acci√≥n que despliegue una web). ",
    "url": "/TUTORIAL-GITHUB/#5-automatizaci%C3%B3n-con-github-actions",
    
    "relUrl": "/#5-automatizaci√≥n-con-github-actions"
  },"24": {
    "doc": "Inicio",
    "title": "6. GitHub Gists",
    "content": "C√≥mo crear snippets de c√≥digo p√∫blicos o privados. ",
    "url": "/TUTORIAL-GITHUB/#6-github-gists",
    
    "relUrl": "/#6-github-gists"
  },"25": {
    "doc": "Inicio",
    "title": "7. GitHub Pages",
    "content": "GitHub Pages permite transformar tu repositorio en un sitio web navegable y profesional. En este proyecto lo utilizamos para publicar el tutorial como una gu√≠a web, aplicando dise√±o personalizado con SCSS, una navegaci√≥n clara desde index.md, y configuraci√≥n precisa con _config.yml. Esta secci√≥n te ense√±ar√° c√≥mo hacerlo desde cero y c√≥mo aprovecharlo como portafolio o documentaci√≥n viva. üîó Leer m√°s‚Ä¶ . ",
    "url": "/TUTORIAL-GITHUB/#7-github-pages",
    
    "relUrl": "/#7-github-pages"
  },"26": {
    "doc": "Inicio",
    "title": "8. Codespaces y Dev Editor",
    "content": "Qu√© son, para qu√© sirven y ejemplos b√°sicos. ",
    "url": "/TUTORIAL-GITHUB/#8-codespaces-y-dev-editor",
    
    "relUrl": "/#8-codespaces-y-dev-editor"
  },"27": {
    "doc": "Inicio",
    "title": "9. Conclusi√≥n",
    "content": "Dominar GitHub es mucho m√°s que saber usar comandos: es comprender c√≥mo colaborar, compartir y construir proyectos de forma profesional. En esta secci√≥n encontrar√°s una reflexi√≥n final sobre todo lo aprendido, la importancia del control de versiones, el trabajo en equipo y c√≥mo GitHub se ha convertido en una herramienta esencial para cualquier desarrollador o estudiante de tecnolog√≠a. üîó Leer m√°s‚Ä¶ . ",
    "url": "/TUTORIAL-GITHUB/#9-conclusi%C3%B3n",
    
    "relUrl": "/#9-conclusi√≥n"
  },"28": {
    "doc": "Inicio",
    "title": "10. Cr√©ditos",
    "content": "üë®‚Äçüíª Jhon Villegas üîó Repositorio en GitHub üìÖ Mayo 2025 . ",
    "url": "/TUTORIAL-GITHUB/#10-cr%C3%A9ditos",
    
    "relUrl": "/#10-cr√©ditos"
  },"29": {
    "doc": "Inicio",
    "title": "Inicio",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/",
    
    "relUrl": "/"
  },"30": {
    "doc": "Introducci√≥n",
    "title": "1. Introducci√≥n",
    "content": ". ¬øQu√© es GitHub? GitHub es una plataforma en l√≠nea donde puedes guardar, compartir y colaborar en c√≥digo con otras personas usando Git, que es un sistema de control de versiones. su importancia en el trabajo colaborativo GitHub es como una red social para programadores, pero con herramientas para: -Guardar proyectos en la nube (repositorios) -Trabajar en equipo -Reportar errores o mejoras (issues) -Proponer cambios (pull requests) c√≥mo ha revolucionado el desarrollo de software GitHub ha tenido un impacto tremendo en la forma en que se desarrolla software. Aqu√≠ te explico c√≥mo ha revolucionado el desarrollo: . | Facilit√≥ la colaboraci√≥n global GitHub ha hecho que sea mucho m√°s f√°cil colaborar con desarrolladores de todo el mundo. Antes, los desarrolladores trabajaban de manera aislada o depend√≠an de herramientas complejas para compartir y fusionar c√≥digo. Con GitHub, ahora pueden: | . Trabajar de manera colaborativa a trav√©s de pull requests, donde otros miembros del equipo revisan y sugieren cambios en el c√≥digo. Ver el c√≥digo y hacer comentarios directamente en cada l√≠nea (lo que ayuda a resolver problemas y mejorar la calidad). Gestionar proyectos de manera eficiente utilizando issues, milestones y proyectos. ",
    "url": "/TUTORIAL-GITHUB/docs/introduccion.html#1-introducci%C3%B3n",
    
    "relUrl": "/docs/introduccion.html#1-introducci√≥n"
  },"31": {
    "doc": "Introducci√≥n",
    "title": "Introducci√≥n",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/introduccion.html",
    
    "relUrl": "/docs/introduccion.html"
  },"32": {
    "doc": "Issues",
    "title": "2. Issues",
    "content": "¬øQu√© son los Issues? . Un Issue es una forma de reportar: errores (bugs), sugerencias de mejora,tareas por hacer,preguntas o problemas relacionados con el proyecto. Los Issues permiten que t√∫ y tu equipo organicen el trabajo y se comuniquen dentro del repositorio. ¬øPara qu√© sirven? . -Documentar errores o fallas detectadas. -Proponer mejoras o nuevas funcionalidades. -Asignar tareas a otros colaboradores. -Hacer seguimiento del progreso. -Discutir problemas con otros usuarios del proyecto. ¬øC√≥mo crear un Issue? . -Entra al repositorio en GitHub. -accede al boton ‚ÄúIssues‚Äù en la parte superior. -accede al bot√≥n verde ‚ÄúNew issue‚Äù. -Al acceder coloca Un t√≠tulo claro (por ejemplo: ‚ÄúError al cargar la p√°gina principal‚Äù). -Una descripci√≥n detallada del problema, con pasos para reproducirlo si es necesario.De forma opcional Puedes utilizar: Labels (etiquetas como ‚Äúbug‚Äù, ‚Äúenhancement‚Äù, etc.). Milestone (si forma parte de una etapa del proyecto). Assignees (personas responsables del issue). Haz clic en ‚ÄúSubmit new issue‚Äù. ¬øC√≥mo asignar un Issue? . Despu√©s de crear el Issue: En el panel derecho del Issue, haz clic en ‚ÄúAssignees‚Äù. Selecciona el usuario de GitHub que ser√° responsable. Necesitas permisos de colaborador o administrador para poder asignar a otros. ¬øC√≥mo cerrar un Issue? . Un Issue se puede cerrar cuando: Se resuelve el problema o se completa la tarea. Ya no es relevante. Desde el repositorio:Abre el Issue. Haz clic en ‚ÄúClose issue‚Äù. desde el terminal se hace un commit que resuelve el Issue, puedes escribir algo como: git commit -m ‚ÄúCorrige bug de inicio de sesi√≥n. Fixes #12‚Äù Ejemplo de Issue. Escenario: Tienes un proyecto donde est√°s creando una lista de compras en un archivo de texto. El archivo tiene una lista de elementos y te das cuenta de que no se agrego un art√≠culo. El procedimiento: Crear un issue: Vas a la secci√≥n de ‚ÄúIssues‚Äù en tu repositorio de GitHub. Haces clic en ‚ÄúNew Issue‚Äù (Nuevo Issue). Pones el t√≠tulo del issue: ‚ÄúAgregar ‚Äúmochila‚Äù a la lista de compras‚Äù. En la descripci√≥n, puedes escribir algo como: ‚ÄúNo coloque ‚Äúmochila‚Äù a la lista de compras. Debe a√±adirse al final de la lista.‚Äù Agregas la etiqueta: ‚Äúdocumentacion‚Äù (ya que se trata de un cambio en la lista de compras que forma parte de la documentaci√≥n del proyecto). De esta forma figuraria la Issues: T√≠tulo: ‚ÄúAgregar ‚Äòmochila‚Äô a la lista de compras‚Äù . Descripci√≥n: . ‚Äúno agregu√© ‚Äòmochila‚Äô a la lista de compras. Debe a√±adirse al final de la lista.‚Äù . ",
    "url": "/TUTORIAL-GITHUB/docs/issues.html#2-issues",
    
    "relUrl": "/docs/issues.html#2-issues"
  },"33": {
    "doc": "Issues",
    "title": "Issues",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/issues.html",
    
    "relUrl": "/docs/issues.html"
  },"34": {
    "doc": "Pull Requests",
    "title": "3. Pull Requests",
    "content": ". Un Pull Request (PR) en GitHub es una solicitud para fusionar cambios desde una rama (por ejemplo, tr) a otra (normalmente main o master) dentro de un repositorio. Es una herramienta clave en el desarrollo colaborativo de software. ",
    "url": "/TUTORIAL-GITHUB/docs/pull_requests.html#3-pull-requests",
    
    "relUrl": "/docs/pull_requests.html#3-pull-requests"
  },"35": {
    "doc": "Pull Requests",
    "title": "como se crea el Pull Request",
    "content": "-Desde Git Bash, ya habiendo realizado los cambios en el archivo. git push origin tr -habiendo hecho el push accede al repositorio cambia a la rama que deses que se fusione con la rama main en este caso. -Haz clic en ‚ÄúCompare &amp; pull request‚Äù. -Completa los detalles y haz clic en ‚ÄúCreate pull request‚Äù. ",
    "url": "/TUTORIAL-GITHUB/docs/pull_requests.html#como-se-crea-el-pull-request",
    
    "relUrl": "/docs/pull_requests.html#como-se-crea-el-pull-request"
  },"36": {
    "doc": "Pull Requests",
    "title": "c√≥mo se revisa y se aprueba",
    "content": "¬øQu√© necesitas? . -Ser colaborador con permisos de escritura en el repositorio. -Acceso al Pull Request abierto que quieres revisar. | Accede al repositorio en GitHub . | Accede al boton Pull requests . | Haz clic en el Pull Request que quieres revisar . | Revisa los cambios . | Aprobar el Pull Request . | . Selecciona la opci√≥n ‚ÄúApprove‚Äù. (Opcional) Escribe un comentario de aprobaci√≥n. Haz clic en ‚ÄúSubmit review‚Äù. | (Opcional) Hacer el merge Si tienes permisos para hacerlo y ya hay al menos una aprobaci√≥n, ver√°s un bot√≥n verde que dice ‚ÄúMerge pull request‚Äù. | . Haz clic en ese bot√≥n para fusionar los cambios con la rama principal (por ejemplo, main). Luego, haz clic en ‚ÄúConfirm merge‚Äù. ",
    "url": "/TUTORIAL-GITHUB/docs/pull_requests.html#c%C3%B3mo-se-revisa-y-se-aprueba",
    
    "relUrl": "/docs/pull_requests.html#c√≥mo-se-revisa-y-se-aprueba"
  },"37": {
    "doc": "Pull Requests",
    "title": "Incluir buenas pr√°cticas para revisiones de c√≥digo.",
    "content": ". | Revisa con atenci√≥n, no con apuro . | Verifica que el cambio cumple su objetivo . | Revisa estilo y format . | Eval√∫a la estructura del c√≥digo . | Aseg√∫rate de que el c√≥digo tenga pruebas . | Detecta posibles errores o riesgos ¬øHay c√≥digo que podr√≠a fallar con ciertos datos? . | Sugiere mejoras, no solo se√±alas problemas . | Fomenta el aprendizaje . | Revisa solo lo necesario Si un PR es demasiado grande, sugiere dividirlo. | . ",
    "url": "/TUTORIAL-GITHUB/docs/pull_requests.html#incluir-buenas-pr%C3%A1cticas-para-revisiones-de-c%C3%B3digo",
    
    "relUrl": "/docs/pull_requests.html#incluir-buenas-pr√°cticas-para-revisiones-de-c√≥digo"
  },"38": {
    "doc": "Pull Requests",
    "title": "Pull Requests",
    "content": " ",
    "url": "/TUTORIAL-GITHUB/docs/pull_requests.html",
    
    "relUrl": "/docs/pull_requests.html"
  }
}
